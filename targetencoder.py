# -*- coding: utf-8 -*-
"""targetencoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qk4eEq6KZRlrurN55-hcq9iqCVemQ4SJ
"""

import numpy as np
import pandas as pd
from sklearn import base
from sklearn.model_selection import KFold

class KFoldTargetEncoderTrain(base.BaseEstimator, base.TransformerMixin):
    def __init__(self,colnames,targetName,
                  n_fold=5, verbosity=True,
                  discardOriginal_col=False):
        self.colnames = colnames
        self.targetName = targetName
        self.n_fold = n_fold
        self.verbosity = verbosity
        self.discardOriginal_col = discardOriginal_col
    def fit(self, X, y=None):
        return self
    def transform(self,X):
        assert(type(self.targetName) == str)
        assert(type(self.colnames) == str)
        assert(self.colnames in X.columns)
        assert(self.targetName in X.columns)
        mean_of_target = X[self.targetName].mean()
        kf = KFold(n_splits = self.n_fold, shuffle = False)
        col_mean_name = self.colnames + '_' + 'Kfold_Target_Enc'
        X[col_mean_name] = np.nan
        for tr_ind, val_ind in kf.split(X):
            X_tr, X_val = X.iloc[tr_ind], X.iloc[val_ind]
            X.loc[X.index[val_ind], col_mean_name] = X_val[self.colnames].map(X_tr.groupby(self.colnames)[self.targetName].mean())
            X[col_mean_name].fillna(mean_of_target, inplace = True)
        if self.verbosity:
            encoded_feature = X[col_mean_name].values
            # print('Correlation between the new feature, {} and, {} is {}.'.format(col_mean_name,self.targetName, np.corrcoef(X[self.targetName].values, encoded_feature)[0][1]))
        if self.discardOriginal_col:
            X = X.drop(self.targetName, axis=1)
        return X


class KFoldTargetEncoderTest(base.BaseEstimator, base.TransformerMixin):
    
  def __init__(self,train,colNames,encodedName):
      
      self.train = train
      self.colNames = colNames
      self.encodedName = encodedName
      
  def fit(self, X, y=None):
      return self
  def transform(self,X):
      mean =  self.train[[self.colNames,
              self.encodedName]].groupby(self.colNames).mean().reset_index() 
      dd = {}
      for index, row in mean.iterrows():
          dd[row[self.colNames]] = row[self.encodedName]
      X[self.encodedName] = X[self.colNames]
      X = X.replace({self.encodedName: dd})

      return X

# df = pd.DataFrame({
#     'x_0': ['a'] * 5 + ['b'] * 5,
#     'y': [1, 1, 1, 1, 0, 1, 0, 0, 0, 0]
# })

# targetc = KFoldTargetEncoderTrain('x_0', 'y', n_fold=5)
# df_train = targetc.fit_transform(df)
# df_train